<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Collaborative Notepad</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"> <!-- Responsive viewport -->
    <style>
        html, body {
            height: 100%; /* Full height for sticky footer */
            margin: 0;
            display: flex;
            flex-direction: column; /* Stack header, content, and footer vertically */
            overflow-x: hidden; /* Prevent horizontal scrolling */
            transition: background-color 0.3s, color 0.3s; /* Smooth transition for colors */
        }
        body.light-mode {
            background-color: #ffffff; /* Classic white background */
            color: #333333; /* Dark text for readability */
        }
        body.dark-mode {
            background-color: #2c3e50; /* Dark blue background */
            color: #ecf0f1; /* Light text for readability */
        }
        header {
            background-color: #2c3e50; /* Dark blue header */
            color: white;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap; /* Allow header elements to wrap on small screens */
        }
        header h1 {
            margin: 0;
            font-size: 1.5rem; /* Smaller font size for mobile */
        }
        .nav-container {
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px; /* Space between the buttons */
        }
        .container {
            flex-grow: 1; /* Allow content area to grow and take available space */
            padding: 20px; /* Padding around container */
            box-sizing: border-box; /* Include padding in width/height calculations */
        }
        textarea {
            width: 100%;
            height: calc(100vh - 160px); /* Full height minus header and footer heights */
            padding: 10px; /* Padding inside the textarea */
            border-radius: 5px; /* Rounded corners */
            border: 1px solid #bdc3c7; /* Light grey border */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Subtle shadow */
            font-size: 16px; /* Increase font size for better readability */
            box-sizing: border-box; /* Ensure padding is included in width/height */
            transition: background-color 0.3s, color 0.3s, border-color 0.3s; /* Smooth transition for textarea */
        }
        body.dark-mode textarea {
            background-color: #34495e; /* Darker background for textarea in dark mode */
            color: #ecf0f1; /* Light text for textarea in dark mode */
            border-color: #7f8c8d; /* Darker border for textarea in dark mode */
        }
        .input-group {
            display: flex; /* Use flexbox to align input and button */
            align-items: stretch; /* Make them the same height */
            margin-top: 10px; /* Space between textarea and input group */
            flex-wrap: wrap; /* Wrap elements on smaller screens */
            gap: 10px; /* Space between elements */
        }
        input[type="text"] {
            flex-grow: 1; /* Allow input to take remaining space */
            padding: 10px; /* Padding for input */
            border-radius: 5px; /* Rounded corners */
            border: 1px solid #bdc3c7; /* Light grey border */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Subtle shadow */
            font-size: 16px; /* Consistent font size with textarea */
            transition: background-color 0.3s, color 0.3s, border-color 0.3s; /* Smooth transition for input field */
        }
        body.dark-mode input[type="text"] {
            background-color: #34495e; /* Darker background for input in dark mode */
            color: #ecf0f1; /* Light text for input in dark mode */
            border-color: #7f8c8d; /* Darker border for input in dark mode */
        }
        button {
            background-color: #314e6b; /* Classic blue button */
            color: white;
            border: none;
            padding: 10px; /* Same padding as input for uniformity */
            cursor: pointer;
            border-radius: 5px; /* Rounded corners for buttons */
            margin-left: 10px; /* Space between input and button */
        }
        button:hover {
            background-color: #2980b9; /* Darker blue on hover */
        }
        footer {
            background-color: #2c3e50; /* Dark blue footer */
            color: white;
            display: flex; /* Use flexbox for layout */
            justify-content: space-between; /* Space between left and right content */
            align-items: center; /* Center vertically */
            padding: 10px 20px; /* Padding around footer content */
            flex-wrap: wrap; /* Allow footer content to wrap */
            gap: 10px; /* Space between footer elements */
        }
        footer a {
            color: white;
            text-decoration: none; /* Remove underline from links */
            margin-left: 10px; /* Spacing between links */
        }

        /* Mobile responsiveness */
        @media screen and (max-width: 768px) {
            header h1 {
                font-size: 1.2rem; /* Smaller font size for header on mobile */
            }
            textarea {
                height: calc(100vh - 180px); /* Adjust textarea height for mobile */
            }
            .nav-container {
                flex-direction: column;
                align-items: flex-start;
            }
            .input-group {
                width: 100%;
            }
            input[type="text"], button {
                width: 100%; /* Make input and button take full width */
                margin-left: 0; /* Remove left margin for mobile */
            }
            footer {
                flex-direction: column;
                text-align: center;
            }
        }
    </style>
</head>
<body class="light-mode"> <!-- Default to light mode -->

<header>
    <h1>Collaborative Notepad</h1>
    <div class="nav-container">
        <div class="input-group">
           <input type="text" id="customUrl" placeholder="Enter custom URL" />
           <button id="setCustomUrl">Set Custom URL</button>
           <button onclick="window.location.href='/new'" style="margin-left: 0px;">Create New Note</button>
           <button id="toggleMode" style="margin-left: 0px;">Switch to Dark Mode</button> <!-- Mode toggle button -->
       </div>
    </div>
</header>

<div class="container">
    <textarea id="noteInput" placeholder="Type your note here..."></textarea>
</div>

<footer>
    <div>&copy; 2025 Collaborative Notepad. All rights reserved.</div>
    <div>Made in ceylon with ‚ù§ by sh13y</div>
    <div>
        <a href="/about">About</a>
        <a href="/privacy">Privacy</a>
        <a href="/contact">Contact</a>
    </div>
</footer>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    const url = window.location.pathname.split('/').pop(); // Get the unique URL from the path
    let typingTimeout;

    // Join the specific note room
    socket.emit('joinNote', url);

    // Load existing note content
    socket.on('loadNote', (note) => {
        document.getElementById('noteInput').value = note.content;
    });

    // Listen for updates from other users
    socket.on('noteUpdated', (content) => {
    const textarea = document.getElementById('noteInput');
    const cursorPosition = textarea.selectionStart; // Save cursor position

    // Only update if content is different (to prevent unnecessary overwriting)
    if (textarea.value !== content) {
        textarea.value = content;
    }

    // Restore cursor position after update
    textarea.selectionStart = cursorPosition;
    textarea.selectionEnd = cursorPosition;
});



   // Debounce function with a shorter delay of 500ms
   function debounce(func, delay) {
       return function(...args) {
           clearTimeout(typingTimeout);
           typingTimeout = setTimeout(() => func.apply(this, args), delay);
       };
   }

    let lastContent = '';

    document.getElementById('noteInput').addEventListener('input', debounce(() => {
        const content = document.getElementById('noteInput').value;
        
        if (content !== lastContent) { // Only send update if text actually changed
            lastContent = content;
            socket.emit('updateNote', { url, content });
        }
    }, 500));

   // Set custom URL functionality
   document.getElementById('setCustomUrl').addEventListener('click', async () => {
       const customUrl = document.getElementById('customUrl').value.trim(); // Trim whitespace
       if (customUrl === url) { // Prevent overwriting with the same URL
            alert("You're already using this URL.");
            return;
}


       const response = await fetch(`/setCustomUrl/${url}`, { // Pass original URL as part of the path
           method: 'POST',
           headers: { 'Content-Type': 'application/json' },
           body: JSON.stringify({ url: customUrl }) // Send new custom URL in body
       });

       const result = await response.json();

       if (result.success) {
           window.location.href = `/notes/${customUrl}`; // Redirect to new custom URL
       } else {
           alert(result.message); // Show error message if failed
       }
   });

   // Toggle light/dark mode functionality
   document.getElementById('toggleMode').addEventListener('click', () => {
    const body = document.body;
    const toggleButton = document.getElementById('toggleMode');

    if (body.classList.contains('light-mode')) {
        body.classList.remove('light-mode');
        body.classList.add('dark-mode');
        toggleButton.textContent = 'Switch to Light Mode';
        localStorage.setItem('theme', 'dark-mode'); // Save preference
    } else {
        body.classList.remove('dark-mode');
        body.classList.add('light-mode');
        toggleButton.textContent = 'Switch to Dark Mode';
        localStorage.setItem('theme', 'light-mode'); // Save preference
    }
});

// Load theme preference on page load
window.onload = function() {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
        document.getElementById('noteInput').focus();
        document.body.classList.remove('light-mode', 'dark-mode');
        document.body.classList.add(savedTheme);
        document.getElementById('toggleMode').textContent = savedTheme === 'dark-mode' ? 'Switch to Light Mode' : 'Switch to Dark Mode';
    }
};

</script>


</body>
</html>

